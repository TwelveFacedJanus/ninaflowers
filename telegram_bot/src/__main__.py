import asyncio
import logging
import sys
from aiogram import Bot, Dispatcher, html, F
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import InputFile, PhotoSize
from aiogram.filters import Command
import base64
from io import BytesIO
from aiogram.types import ContentType
import tempfile
import os
from aiogram.types import InputFile

from crud import ManageUsers, ManageBouquets
from models import Users

class AuthStages(StatesGroup):
    waiting_for_token = State()

class AddUserStages(StatesGroup):
    waiting_for_telegram_id = State()
    waiting_for_role = State()

class AddBouquetStages(StatesGroup):
    waiting_for_photo = State()
    waiting_for_name = State()
    waiting_for_description = State()
    waiting_for_price = State()

class RemoveBouquetStages(StatesGroup):
    waiting_for_bouquet_id = State()

class EditBouquetStages(StatesGroup):
    waiting_for_bouquet_id = State()
    waiting_for_edit_choice = State()
    waiting_for_new_value = State()

async def set_default_user():
    if await ManageUsers.find_user_by_id(user_id='6111027096') is None:
        await ManageUsers.set_user(user=Users(telegram_id='6111027096', phone_number='None', role='tech', auth_token='HBVGVgvwdfyghbBAHSDBVh1512'))
    else:
        print("Default user already exists.")

BOT_API_TOKEN: str = '7647382898:AAGjUFJD4xcA_57f8rxkXElMzatJIsEqNqA'

dp = Dispatcher()

async def get_main_keyboard(user_id: int) -> ReplyKeyboardMarkup:
    user = await ManageUsers.find_user_by_id(user_id)
    
    # –ë–∞–∑–æ–≤—ã–µ –∫–Ω–æ–ø–∫–∏, –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≤—Å–µ–º
    buttons = [
        [KeyboardButton(text="–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –±—É–∫–µ—Ç—ã")],
        [KeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –±—É–∫–µ—Ç")],
        [KeyboardButton(text="–£–¥–∞–ª–∏—Ç—å –±—É–∫–µ—Ç")],
        [KeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –±—É–∫–µ—Ç")],
        [KeyboardButton(text="–ó–∞–∫–∞–∑—ã")]
    ]
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è, –µ—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω—É–∂–Ω–∞—è —Ä–æ–ª—å
    if user and user.role in ['admin', 'tech']:
        admin_buttons = [
            KeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"),
            KeyboardButton(text="–£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        ]
        buttons.insert(0, admin_buttons)
    
    return ReplyKeyboardMarkup(
        keyboard=buttons,
        resize_keyboard=True,
        input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ"
    )

@dp.message(F.text == "–£–¥–∞–ª–∏—Ç—å –±—É–∫–µ—Ç")
async def handle_remove_bouquet(message: Message, state: FSMContext):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = await ManageUsers.find_user_by_id(message.from_user.id)
    if not user or user.role not in ['admin', 'tech', 'florist']:
        await message.answer("‚õî –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏.")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –±—É–∫–µ—Ç–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞
    bouquets = await ManageBouquets.get_all_bouquets()
    if not bouquets:
        await message.answer("üì≠ –°–ø–∏—Å–æ–∫ –±—É–∫–µ—Ç–æ–≤ –ø—É—Å—Ç.")
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –±—É–∫–µ—Ç–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞
    bouquets_list = "\n".join([f"{bouquet['id']}: {bouquet['name']}" for bouquet in bouquets])
    await message.answer(f"–í–≤–µ–¥–∏—Ç–µ ID –±—É–∫–µ—Ç–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:\n\n{bouquets_list}")
    await state.set_state(RemoveBouquetStages.waiting_for_bouquet_id)

@dp.message(RemoveBouquetStages.waiting_for_bouquet_id)
async def process_remove_bouquet(message: Message, state: FSMContext):
    try:
        bouquet_id = int(message.text.strip())
        success = await ManageBouquets.remove_bouquet(bouquet_id)
        
        if success:
            await message.answer("‚úÖ –ë—É–∫–µ—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!", reply_markup=await get_main_keyboard(message.from_user.id))
        else:
            await message.answer("‚ùå –ë—É–∫–µ—Ç —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    except ValueError:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID –±—É–∫–µ—Ç–∞.")
    finally:
        await state.clear()

@dp.message(F.text == "–ò–∑–º–µ–Ω–∏—Ç—å –±—É–∫–µ—Ç")
async def handle_edit_bouquet(message: Message, state: FSMContext):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = await ManageUsers.find_user_by_id(message.from_user.id)
    if not user or user.role not in ['admin', 'tech', 'florist']:
        await message.answer("‚õî –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏.")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –±—É–∫–µ—Ç–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞
    bouquets = await ManageBouquets.get_all_bouquets()
    if not bouquets:
        await message.answer("üì≠ –°–ø–∏—Å–æ–∫ –±—É–∫–µ—Ç–æ–≤ –ø—É—Å—Ç.")
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –±—É–∫–µ—Ç–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞
    bouquets_list = "\n".join([f"{bouquet['id']}: {bouquet['name']}" for bouquet in bouquets])
    await message.answer(f"–í–≤–µ–¥–∏—Ç–µ ID –±—É–∫–µ—Ç–∞ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:\n\n{bouquets_list}")
    await state.set_state(EditBouquetStages.waiting_for_bouquet_id)

@dp.message(EditBouquetStages.waiting_for_bouquet_id)
async def process_edit_bouquet_id(message: Message, state: FSMContext):
    try:
        bouquet_id = int(message.text.strip())
        bouquet = await ManageBouquets.get_bouquet_by_id(bouquet_id)
        
        if not bouquet:
            await message.answer("‚ùå –ë—É–∫–µ—Ç —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            await state.clear()
            return
        
        await state.update_data(bouquet_id=bouquet_id)
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–æ–ª—è –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è
        edit_keyboard = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="–ù–∞–∑–≤–∞–Ω–∏–µ")],
                [KeyboardButton(text="–û–ø–∏—Å–∞–Ω–∏–µ")],
                [KeyboardButton(text="–¶–µ–Ω–∞")],
                [KeyboardButton(text="–§–æ—Ç–æ")],
                [KeyboardButton(text="–û—Ç–º–µ–Ω–∞")]
            ],
            resize_keyboard=True
        )
        
        await message.answer(
            f"–í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ –∏–∑–º–µ–Ω–∏—Ç—å –≤ –±—É–∫–µ—Ç–µ {bouquet['name']}:",
            reply_markup=edit_keyboard
        )
        await state.set_state(EditBouquetStages.waiting_for_edit_choice)
        
    except ValueError:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID –±—É–∫–µ—Ç–∞.")

@dp.message(EditBouquetStages.waiting_for_edit_choice)
async def process_edit_choice(message: Message, state: FSMContext):
    choice = message.text.strip().lower()
    
    if choice == "–æ—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer("–ò–∑–º–µ–Ω–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=await get_main_keyboard(message.from_user.id))
        return
    
    valid_choices = ["–Ω–∞–∑–≤–∞–Ω–∏–µ", "–æ–ø–∏—Å–∞–Ω–∏–µ", "—Ü–µ–Ω–∞", "—Ñ–æ—Ç–æ"]
    if choice not in valid_choices:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.")
        return
    
    await state.update_data(edit_choice=choice)
    
    if choice == "—Ñ–æ—Ç–æ":
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ –±—É–∫–µ—Ç–∞:")
    else:
        await message.answer(f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è {choice}:")
    
    await state.set_state(EditBouquetStages.waiting_for_new_value)

@dp.message(EditBouquetStages.waiting_for_new_value, F.content_type == ContentType.PHOTO)
async def process_new_photo(message: Message, state: FSMContext):
    data = await state.get_data()
    if data.get('edit_choice') != '—Ñ–æ—Ç–æ':
        await message.answer("‚ùå –û–∂–∏–¥–∞–ª–æ—Å—å —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
        await state.clear()
        return
    
    try:
        photo = message.photo[-1]
        photo_file = await message.bot.get_file(photo.file_id)
        photo_bytes = await message.bot.download_file(photo_file.file_path)
        image_base64 = base64.b64encode(photo_bytes.read()).decode('utf-8')
        
        update_data = {
            'photo_file_id': photo.file_id,
            'photo_base64': image_base64
        }
        
        success = await ManageBouquets.update_bouquet(data['bouquet_id'], update_data)
        
        if success:
            await message.answer("‚úÖ –§–æ—Ç–æ –±—É–∫–µ—Ç–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!", reply_markup=await get_main_keyboard(message.from_user.id))
        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ñ–æ—Ç–æ –±—É–∫–µ—Ç–∞.")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ: {str(e)}")
    finally:
        await state.clear()

@dp.message(EditBouquetStages.waiting_for_new_value)
async def process_new_value(message: Message, state: FSMContext):
    data = await state.get_data()
    choice = data.get('edit_choice')
    new_value = message.text.strip()
    
    update_data = {}
    
    if choice == "–Ω–∞–∑–≤–∞–Ω–∏–µ":
        update_data['name'] = new_value
    elif choice == "–æ–ø–∏—Å–∞–Ω–∏–µ":
        update_data['description'] = new_value
    elif choice == "—Ü–µ–Ω–∞":
        try:
            update_data['price'] = int(new_value)
            if update_data['price'] <= 0:
                raise ValueError
        except ValueError:
            await message.answer("‚ùå –¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return
    
    success = await ManageBouquets.update_bouquet(data['bouquet_id'], update_data)
    
    if success:
        await message.answer(f"‚úÖ {choice.capitalize()} –±—É–∫–µ—Ç–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!", reply_markup=await get_main_keyboard(message.from_user.id))
    else:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ {choice} –±—É–∫–µ—Ç–∞.")
    
    await state.clear()


@dp.message(F.text == "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –±—É–∫–µ—Ç—ã")
async def view_bouquets(message: Message):
    try:
        bouquets = await ManageBouquets.get_all_bouquets()
        if not bouquets:
            await message.answer("üì≠ –°–ø–∏—Å–æ–∫ –±—É–∫–µ—Ç–æ–≤ –ø—É—Å—Ç.")
            return
            
        for bouquet in bouquets:
            caption = (
                f"üíê {bouquet['name']}\n\n"
                f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {bouquet['description']}\n"
                f"üí∞ –¶–µ–Ω–∞: {bouquet['price']:,} —Ä—É–±.".replace(",", " ")
            )
            
            # First try to use file_id if available
            if bouquet.get('photo_file_id'):
                try:
                    await message.answer_photo(
                        photo=bouquet['photo_file_id'],
                        caption=caption
                    )
                    continue
                except Exception as e:
                    logging.warning(f"Failed to send using file_id: {e}")
            
            # Fall back to base64 if file_id fails or doesn't exist
            if bouquet.get('photo_base64'):
                try:
                    photo_bytes = base64.b64decode(bouquet['photo_base64'])
                    # Create temporary file
                    with tempfile.NamedTemporaryFile(delete=False, suffix='.jpg') as tmp:
                        tmp.write(photo_bytes)
                        tmp_path = tmp.name
                    
                    # Send using file path
                    await message.answer_photo(
                        photo=InputFile(tmp_path),
                        caption=caption
                    )
                    # Clean up
                    os.unlink(tmp_path)
                except Exception as e:
                    logging.error(f"Error processing photo for bouquet {bouquet.get('id')}: {str(e)}")
                    await message.answer(
                        text=f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å —Ñ–æ—Ç–æ –¥–ª—è –±—É–∫–µ—Ç–∞ {bouquet['name']}\n\n{caption}"
                    )
            else:
                await message.answer(text=caption)
                
    except Exception as e:
        logging.exception("Error in view_bouquets")
        await message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –±—É–∫–µ—Ç–æ–≤: {str(e)}")

@dp.message(F.text == "–î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
async def handle_add_user_request(message: Message, state: FSMContext):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = await ManageUsers.find_user_by_id(message.from_user.id)
    
    if not user or user.role not in ['admin', 'tech']:
        await message.answer("‚õî –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏.")
        return
    
    await message.answer("–í–≤–µ–¥–∏—Ç–µ Telegram ID –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:")
    await state.set_state(AddUserStages.waiting_for_telegram_id)

@dp.message(AddUserStages.waiting_for_telegram_id)
async def process_telegram_id(message: Message, state: FSMContext):
    telegram_id = message.text.strip()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å ID
    if not telegram_id.isdigit():
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π Telegram ID:")
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(telegram_id=telegram_id)
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ —Ä–æ–ª—è–º–∏
    roles_keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="user")],
            [KeyboardButton(text="florist")],
            [KeyboardButton(text="tech")] + ([KeyboardButton(text="admin")] if (await ManageUsers.find_user_by_id(message.from_user.id)).role == 'admin' else [])
        ],
        resize_keyboard=True,
        one_time_keyboard=True
    )
    
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", reply_markup=roles_keyboard)
    await state.set_state(AddUserStages.waiting_for_role)

@dp.message(AddUserStages.waiting_for_role)
async def process_role(message: Message, state: FSMContext):
    role = message.text.strip().lower()
    current_user = await ManageUsers.find_user_by_id(message.from_user.id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ–ø—É—Å—Ç–∏–º–æ—Å—Ç—å —Ä–æ–ª–∏
    allowed_roles = ['user', 'tech', 'florist']
    if current_user.role == 'admin':
        allowed_roles.append('admin')
    
    if role not in allowed_roles:
        await message.answer(f"‚ùå –ù–µ–¥–æ–ø—É—Å—Ç–∏–º–∞—è —Ä–æ–ª—å. –í—ã–±–µ—Ä–∏—Ç–µ –∏–∑: {', '.join(allowed_roles)}")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    data = await state.get_data()
    telegram_id = data['telegram_id']
    
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    new_user = Users(
        telegram_id=telegram_id,
        phone_number=None,
        role=role,
        auth_token=None  # –ú–æ–∂–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
    )
    
    try:
        await ManageUsers.set_user(user=new_user)
        await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {telegram_id} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω —Å —Ä–æ–ª—å—é {role}!", 
                           reply_markup=await get_main_keyboard(message.from_user.id))
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {str(e)}")
    
    await state.clear()

@dp.message(CommandStart())
async def command_start_handler(message: Message, state: FSMContext) -> None:
    await message.answer("–ü—Ä–∏–≤–µ—Ç, –º–µ–Ω—è –∑–æ–≤—É—Ç –§—Ä–∏—Ä–µ–Ω! –Ø –±—É–¥—É –ø–æ–º–æ–≥–∞—Ç—å —Ç–µ–±–µ —Å —Ç–≤–æ–µ–π —Ä–∞–±–æ—Ç–æ–π!")
    await asyncio.sleep(1)
    await message.answer("–î–ª—è –Ω–∞—á–∞–ª–∞, —Ç–µ–±–µ –Ω—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏. –ï–≥–æ —Ç—ã –º–æ–∂–µ—à—å –≤–∑—è—Ç—å —É tg://user?id=6111027096")
    if await ManageUsers.find_user_by_id(message.from_user.id) is None:
        await ManageUsers.set_user(user=Users(telegram_id=str(message.from_user.id), phone_number=None))
    await state.set_state(AuthStages.waiting_for_token)

@dp.message(AuthStages.waiting_for_token)
async def process_token(message: Message, state: FSMContext) -> None:
    user_token = message.text.strip()

    if await validate_token(user_token, message.from_user.id):
        keyboard = await get_main_keyboard(message.from_user.id)
        await message.answer("‚úÖ –¢–æ–∫–µ–Ω –ø—Ä–∏–Ω—è—Ç! –¢–µ–ø–µ—Ä—å —Ç—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω.", reply_markup=keyboard)
        await state.clear()
        await message.answer("–¢–µ–ø–µ—Ä—å —Ç—ã –º–æ–∂–µ—à—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤—Å–µ–º–∏ –º–æ–∏–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏", reply_markup=keyboard)
    else:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.")

@dp.message(F.text == "–î–æ–±–∞–≤–∏—Ç—å –±—É–∫–µ—Ç")
async def handle_add_bouquet(message: Message, state: FSMContext):
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –±—É–∫–µ—Ç–∞:")
    await state.set_state(AddBouquetStages.waiting_for_photo)

@dp.message(AddBouquetStages.waiting_for_photo, F.content_type == ContentType.PHOTO)
async def process_bouquet_photo(message: Message, state: FSMContext):
    try:
        photo = message.photo[-1]
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º file_id –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        await state.update_data(photo_file_id=photo.file_id)
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ base64 –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        photo_file = await message.bot.get_file(photo.file_id)
        photo_bytes = await message.bot.download_file(photo_file.file_path)
        image_base64 = base64.b64encode(photo_bytes.read()).decode('utf-8')
        await state.update_data(photo_base64=image_base64)
        
        await message.answer("–§–æ—Ç–æ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±—É–∫–µ—Ç–∞:")
        await state.set_state(AddBouquetStages.waiting_for_name)
        
    except Exception as e:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        await state.clear()

@dp.message(AddBouquetStages.waiting_for_photo)
async def process_bouquet_photo_invalid(message: Message):
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–º–µ–Ω–Ω–æ —Ñ–æ—Ç–æ –±—É–∫–µ—Ç–∞.")

@dp.message(AddBouquetStages.waiting_for_name)
async def process_bouquet_name(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    await message.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –±—É–∫–µ—Ç–∞:")
    await state.set_state(AddBouquetStages.waiting_for_description)

@dp.message(AddBouquetStages.waiting_for_description)
async def process_bouquet_description(message: Message, state: FSMContext):
    await state.update_data(description=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –±—É–∫–µ—Ç–∞ (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã, –Ω–∞–ø—Ä–∏–º–µ—Ä: 2500):")
    await state.set_state(AddBouquetStages.waiting_for_price)

@dp.message(AddBouquetStages.waiting_for_price)
async def process_bouquet_price(message: Message, state: FSMContext):
    try:
        price = int(message.text.strip())
        if price <= 0:
            raise ValueError
    except ValueError:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ 0):")
        return

    await state.update_data(price=price)

    data = await state.get_data()

    try:
        # –ü–æ–ª—É—á–∞–µ–º file_id –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è (–µ—Å–ª–∏ —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ)
        if 'photo_file_id' in data:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–µ —Ñ–æ—Ç–æ —á–µ—Ä–µ–∑ file_id
            await message.answer_photo(
                photo=data['photo_file_id'],
                caption=(
                    f"‚úÖ –ë—É–∫–µ—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!\n\n"
                    f"–ù–∞–∑–≤–∞–Ω–∏–µ: {data['name']}\n"
                    f"–û–ø–∏—Å–∞–Ω–∏–µ: {data['description']}\n"
                    f"–°—Ç–æ–∏–º–æ—Å—Ç—å: {price:,} —Ä—É–±.".replace(",", " ")
                ),
                reply_markup=await get_main_keyboard(message.from_user.id),
            )
        else:
            # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –±–µ–∑ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ
            await message.answer(
                text=(
                    f"‚úÖ –ë—É–∫–µ—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!\n\n"
                    f"–ù–∞–∑–≤–∞–Ω–∏–µ: {data['name']}\n"
                    f"–û–ø–∏—Å–∞–Ω–∏–µ: {data['description']}\n"
                    f"–°—Ç–æ–∏–º–æ—Å—Ç—å: {price:,} —Ä—É–±.".replace(",", " ")
                ),
                reply_markup=await get_main_keyboard(message.from_user.id),
            )

        await ManageBouquets.add_bouquet(data)
        
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –±—É–∫–µ—Ç–∞: {str(e)}")
        logging.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –±—É–∫–µ—Ç–∞")
    
    await state.clear()

# –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã –ª—é–±–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è
@dp.message(Command("cancel"))
@dp.message(F.text.casefold() == "–æ—Ç–º–µ–Ω–∞")
async def cancel_handler(message: Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state is None:
        return
    
    await state.clear()
    await message.answer(
        "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
        reply_markup=await get_main_keyboard(message.from_user.id)
    )

async def validate_token(token: str, user_id: int) -> bool:
    return await ManageUsers.check_token_by_user_id(user_id, token)

async def main() -> None:
    bot = Bot(token=BOT_API_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
    await set_default_user()
    await dp.start_polling(bot)

if __name__ == '__main__':
    logging.basicConfig(level=logging.INFO, stream=sys.stdout)
    asyncio.run(main())
